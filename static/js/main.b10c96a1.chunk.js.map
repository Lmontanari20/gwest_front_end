{"version":3,"sources":["assets/gwestLogo.png","components/Home.js","redux/gwestActions.js","components/NavBar.js","components/Login.js","components/Signup.js","assets/cards/Baba_Looey_Card.png","assets/cards/Gattling_Gun_Card.png","assets/cards/No_Name_Card.png","assets/cards/Ringo_Kid_Card.png","assets/cards/Pistol_Pete_Card.png","assets/cards/Bufflo_Bill_Card.png","assets/cards/Billy_The_Kid_Card.png","assets/cards/Butch_Cassidy_Card.png","assets/cards/quick_Draw_McGraw.png","assets/cards/Bonnie_Clyde_Card.png","assets/cards/Dolores_Abernathy_Card.png","assets/cards/Calamity_Jane_Card.png","assets/cards/Pony_Card.png","assets/cards/Stallion_Card.png","assets/cards/Donkey_Card.png","assets/cards/Bow_Arrow_Card.png","assets/cards/Rifle_Card.png","assets/cards/Revolver_Card.png","assets/cards/Dual_Revolvers.png","assets/cards/Speedy.png","components/Battles.js","components/Cards.js","components/Record.js","App.js","reportWebVitals.js","redux/gwestReducer.js","index.js"],"names":["home","props","className","src","logo","alt","login","username","id","type","payload","logout","addBattles","battles","connect","state","userID","dispatch","Navbar","style","position","exact","to","Brand","Collapse","Nav","Link","onClick","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","target","value","password","then","resp","json","data","localStorage","setItem","token","history","push","catch","console","log","name","userInfo","user","deck","userCardsAvailable","battle","aiDeck","aiCardsAvailable","inGame","userTurn","aiBoard","userBoard","aiPoints","userPoints","aiPass","userPass","round1Win","round2Win","round3Win","round1Score","round2Score","round3Score","addCard","cards","aiAvailable","startGame","endGame","cardsAvailable","changeUserTurn","changeAIBoard","board","changeUserBoard","setAIPoints","points","setUserPoints","setUserPass","pass","setAIPass","set1Win","winner","set2Win","set3Win","set1Score","score","set2Score","set3Score","addBattle","setAddCard","add","useEffect","aiTurn","checkRoundEnd","checkWin","getPhoto","gat","man","ringo","pete","bill","billy","butch","quick","bonnie","delores","jane","pony","stallion","donkey","bow","rifle","revolver","dual","baba","speedy","length","card","Math","floor","random","newBoard","cardClass","newAvailable","filter","uCard","attack","setNextRound","win","postBattle","addNewCard","round1","round2","round3","resetGame","melee","ranged","siege","getCardsAvailable","available","includes","mapUserGame","area","map","photo","mapAIGame","getAIDECK","res","getAICARDS","alert","ai_name","display","star","border","textAlign","startTurn","addCards","cardsResp","handleClick","deckCard","getLevel","wins","parseInt","status","mapCards","mapDeck","reverse","Card","Body","Title","Subtitle","Text","mapBattlesToCards","withRouter","path","component","Home","Battles","Cards","Record","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","roundCount","store","createStore","action","removeItem","deckCards","indeck","class","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","backgroundImage","backgroundRepeat","backgroundSize","document","getElementById"],"mappings":"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","file":"static/js/main.b10c96a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gwestLogo.4b87acd9.png\";","import \"./../index.css\";\nimport logo from \"./../assets/gwestLogo.png\";\nconst home = (props) => {\n  return (\n    <div className=\"home\">\n      <img className=\"logo\" src={logo} alt=\"wild wild gwest logo\" />\n      <h4>Login or Signup to play!</h4>\n      <h5>Rules:</h5>\n      <p>\n        When you create an account you will be given 12 cards to start out with.\n      </p>\n      <p>\n        You will need to put these cards in your deck to play (you have to have\n        at least 12 cards in your deck to play).\n      </p>\n      <p>You can play once you hit the battle tab.</p>\n      <p>\n        The goal of this game is to win 2 out of 3 rounds against the computer.\n      </p>\n      <p>\n        Each card has a class and an attack power, the points are based on how\n        much attack your current cards on the board have.\n      </p>\n      <p>\n        Once you want to go to the next round you can click the pass button.\n      </p>\n      <p>You only get 10 cards so use them wisely.</p>\n    </div>\n  );\n};\n\nexport default home;\n","export const login = (username, id) => {\n  return {\n    type: \"LOGIN\",\n    payload: {\n      username: username,\n      id: id,\n    },\n  };\n};\n\nexport const logout = (username) => {\n  return {\n    type: \"LOGOUT\",\n    payload: username,\n  };\n};\n\nexport const addBattles = (battles) => {\n  return {\n    type: \"ALLBATTLES\",\n    payload: battles,\n  };\n};\n\nexport const addCards = (cards) => {\n  return {\n    type: \"ADDCARDS\",\n    payload: cards,\n  };\n};\n\nexport const aiDeck = (cards) => {\n  return {\n    type: \"AIDECK\",\n    payload: cards,\n  };\n};\n\nexport const aiAvailable = (cards) => {\n  return {\n    type: \"AIAVAILABLE\",\n    payload: cards,\n  };\n};\n\nexport const startGame = () => {\n  return {\n    type: \"STARTGAME\",\n    payload: null,\n  };\n};\n\nexport const endGame = () => {\n  return {\n    type: \"ENDGAME\",\n    payload: null,\n  };\n};\n\nexport const cardsAvailable = (cards) => {\n  return {\n    type: \"CARDSAVAILABLE\",\n    payload: cards,\n  };\n};\n\nexport const changeUserTurn = () => {\n  return {\n    type: \"USERTURN\",\n    payload: null,\n  };\n};\n\nexport const changeAIBoard = (board) => {\n  return {\n    type: \"CHANGEAIBOARD\",\n    payload: board,\n  };\n};\n\nexport const changeUserBoard = (board) => {\n  return {\n    type: \"CHANGEUSERBOARD\",\n    payload: board,\n  };\n};\n\nexport const setAIPoints = (points) => {\n  return {\n    type: \"AIPOINTS\",\n    payload: points,\n  };\n};\n\nexport const setUserPoints = (points) => {\n  return {\n    type: \"USERPOINTS\",\n    payload: points,\n  };\n};\n\nexport const setAIPass = (pass) => {\n  return {\n    type: \"AIPASS\",\n    payload: pass,\n  };\n};\n\nexport const setUserPass = (pass) => {\n  return {\n    type: \"USERPASS\",\n    payload: pass,\n  };\n};\n\nexport const set1Win = (winner) => {\n  return {\n    type: \"ROUND1WINNER\",\n    payload: winner,\n  };\n};\n\nexport const set2Win = (winner) => {\n  return {\n    type: \"ROUND2WINNER\",\n    payload: winner,\n  };\n};\n\nexport const set3Win = (winner) => {\n  return {\n    type: \"ROUND3WINNER\",\n    payload: winner,\n  };\n};\n\nexport const set1Score = (score) => {\n  return {\n    type: \"ROUND1SCORE\",\n    payload: score,\n  };\n};\n\nexport const set2Score = (score) => {\n  return {\n    type: \"ROUND2SCORE\",\n    payload: score,\n  };\n};\n\nexport const set3Score = (score) => {\n  return {\n    type: \"ROUND3SCORE\",\n    payload: score,\n  };\n};\n\nexport const addBattle = (battle) => {\n  return {\n    type: \"ADDBATTLE\",\n    payload: battle,\n  };\n};\n\nexport const nextRound = (round) => {\n  return {\n    type: \"NEXTROUND\",\n    payload: round,\n  };\n};\n\nexport const setAddCard = (add) => {\n  return {\n    type: \"SETADDCARD\",\n    payload: add,\n  };\n};\n","import React, { Fragment } from \"react\";\nimport logo from \"./../assets/gwestLogo.png\";\nimport \"./../index.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { login, logout } from \"./../redux/gwestActions.js\";\n\nconst NavBar = (props) => {\n  return (\n    <Fragment>\n      <Navbar className=\"color-nav\" style={{ position: \"fixed\" }}>\n        <LinkContainer exact to=\"/\">\n          <Navbar.Brand>\n            <img\n              className=\"nav-logo\"\n              src={logo}\n              alt=\"wild wild gwest logo\"\n            ></img>\n          </Navbar.Brand>\n        </LinkContainer>\n        {/* <Navbar.Toggle aria-controls=\"basic-navbar-nav\" /> */}\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {props.username !== null && (\n              <Fragment>\n                <LinkContainer exact to=\"/battles\">\n                  <Nav.Link>Play</Nav.Link>\n                </LinkContainer>\n                <LinkContainer exact to=\"/cards\">\n                  <Nav.Link>Deck</Nav.Link>\n                </LinkContainer>\n                <LinkContainer exact to=\"/record\">\n                  <Nav.Link>Record</Nav.Link>\n                </LinkContainer>\n              </Fragment>\n            )}\n          </Nav>\n          <Nav>\n            {props.username === null ? (\n              <Fragment>\n                <LinkContainer exact to=\"/login\">\n                  <Nav.Link>Login</Nav.Link>\n                </LinkContainer>\n                <LinkContainer exact to=\"/signup\">\n                  <Nav.Link>Signup</Nav.Link>\n                </LinkContainer>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <LinkContainer exact to=\"/\">\n                  <Nav.Link onClick={props.logout}>Logout</Nav.Link>\n                </LinkContainer>\n              </Fragment>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.username,\n    userID: state.id,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (username, id) => dispatch(login(username, id)),\n    logout: (username) => dispatch(logout(username)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./../index.css\";\nimport { login, logout } from \"./../redux/gwestActions.js\";\nconst Login = (props) => {\n  // function that handles the login functionality\n  const handleLogin = (e) => {\n    e.preventDefault();\n    fetch(\"https://wild-wild-gwest.herokuapp.com/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.username.value,\n        password: e.target.password.value,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        props.login(data.username, data.id);\n        localStorage.setItem(\"token\", data.token);\n        props.history.push(\"/record\");\n      })\n      .catch(console.log);\n  };\n\n  return (\n    <div className=\"Login\">\n      <h2>Login</h2>\n      <form onSubmit={handleLogin}>\n        <label>Username: </label>\n        <input type=\"text\" name=\"username\" />\n        <br />\n        <br></br>\n        <label>Password: </label>\n        <input type=\"password\" name=\"password\" />\n        <br />\n        <br></br>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (username, id) => dispatch(login(username, id)),\n    logout: (username) => dispatch(logout(username)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { login, logout } from \"./../redux/gwestActions.js\";\n\nconst Signup = (props) => {\n  // function that handles the signup functionality\n  const handleSignup = (e, userInfo) => {\n    e.preventDefault();\n    let user = {\n      username: e.target.username.value,\n      password: e.target.password.value,\n    };\n    fetch(\"https://wild-wild-gwest.herokuapp.com/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        // if data.username else if data.error\n        props.login(data.username, data.id);\n        localStorage.setItem(\"token\", data.token);\n        props.history.push(\"/record\");\n      })\n      .catch(console.log);\n  };\n\n  return (\n    <div className=\"Signup\">\n      <h2>Sign Up</h2>\n      <form onSubmit={handleSignup}>\n        <label>Username: </label>\n        <input type=\"text\" name=\"username\" />\n        <br />\n        <br />\n        <label>Password: </label>\n        <input type=\"password\" name=\"password\" />\n        <br />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (username, id) => dispatch(login(username, id)),\n    logout: (username) => dispatch(logout(username)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Signup);\n","export default __webpack_public_path__ + \"static/media/Baba_Looey_Card.82236496.png\";","export default __webpack_public_path__ + \"static/media/Gattling_Gun_Card.82d904bd.png\";","export default __webpack_public_path__ + \"static/media/No_Name_Card.30971b02.png\";","export default __webpack_public_path__ + \"static/media/Ringo_Kid_Card.a361d888.png\";","export default __webpack_public_path__ + \"static/media/Pistol_Pete_Card.95a69d2f.png\";","export default __webpack_public_path__ + \"static/media/Bufflo_Bill_Card.db5a64f3.png\";","export default __webpack_public_path__ + \"static/media/Billy_The_Kid_Card.056994b2.png\";","export default __webpack_public_path__ + \"static/media/Butch_Cassidy_Card.9dd7db68.png\";","export default __webpack_public_path__ + \"static/media/quick_Draw_McGraw.02c853c2.png\";","export default __webpack_public_path__ + \"static/media/Bonnie_Clyde_Card.a30dd483.png\";","export default __webpack_public_path__ + \"static/media/Dolores_Abernathy_Card.5c61747a.png\";","export default __webpack_public_path__ + \"static/media/Calamity_Jane_Card.4894dafb.png\";","export default __webpack_public_path__ + \"static/media/Pony_Card.924fbf4e.png\";","export default __webpack_public_path__ + \"static/media/Stallion_Card.84080d92.png\";","export default __webpack_public_path__ + \"static/media/Donkey_Card.f2e41589.png\";","export default __webpack_public_path__ + \"static/media/Bow_Arrow_Card.64d19f78.png\";","export default __webpack_public_path__ + \"static/media/Rifle_Card.d0c47af7.png\";","export default __webpack_public_path__ + \"static/media/Revolver_Card.3b553141.png\";","export default __webpack_public_path__ + \"static/media/Dual_Revolvers.545e77c4.png\";","export default __webpack_public_path__ + \"static/media/Speedy.844bc725.png\";","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./../index.css\";\nimport {\n  addBattles,\n  aiDeck,\n  aiAvailable,\n  startGame,\n  endGame,\n  cardsAvailable,\n  changeUserTurn,\n  setAIPoints,\n  setUserPoints,\n  changeAIBoard,\n  changeUserBoard,\n  setUserPass,\n  setAIPass,\n  set1Score,\n  set2Score,\n  set3Score,\n  set1Win,\n  set2Win,\n  set3Win,\n  addBattle,\n  setAddCard,\n} from \"./../redux/gwestActions.js\";\nimport baba from \"./../assets/cards/Baba_Looey_Card.png\";\nimport gat from \"./../assets/cards/Gattling_Gun_Card.png\";\nimport man from \"./../assets/cards/No_Name_Card.png\";\nimport ringo from \"./../assets/cards/Ringo_Kid_Card.png\";\nimport pete from \"./../assets/cards/Pistol_Pete_Card.png\";\nimport bill from \"./../assets/cards/Bufflo_Bill_Card.png\";\nimport billy from \"./../assets/cards/Billy_The_Kid_Card.png\";\nimport butch from \"./../assets/cards/Butch_Cassidy_Card.png\";\nimport quick from \"./../assets/cards/quick_Draw_McGraw.png\";\nimport bonnie from \"./../assets/cards/Bonnie_Clyde_Card.png\";\nimport delores from \"./../assets/cards/Dolores_Abernathy_Card.png\";\nimport jane from \"./../assets/cards/Calamity_Jane_Card.png\";\nimport pony from \"./../assets/cards/Pony_Card.png\";\nimport stallion from \"./../assets/cards/Stallion_Card.png\";\nimport donkey from \"./../assets/cards/Donkey_Card.png\";\nimport bow from \"./../assets/cards/Bow_Arrow_Card.png\";\nimport rifle from \"./../assets/cards/Rifle_Card.png\";\nimport revolver from \"./../assets/cards/Revolver_Card.png\";\nimport dual from \"./../assets/cards/Dual_Revolvers.png\";\nimport speedy from \"./../assets/cards/Speedy.png\";\n\nconst Battles = (props) => {\n  useEffect(() => {\n    if (props.userPass && !props.aiPass) {\n      aiTurn();\n    }\n    if (props.userPass && props.aiPass) {\n      checkRoundEnd();\n    }\n    if (\n      props.round2Score != null ||\n      (props.round3Score != null && props.inGame && props.round1Score !== null)\n    ) {\n      checkWin();\n    }\n  });\n\n  const getPhoto = (name) => {\n    switch (name) {\n      case \"Gattling Gun\":\n        return gat;\n      case \"Man With No Name\":\n        return man;\n      case \"Ringo Kid\":\n        return ringo;\n      case \"Pistol Pete\":\n        return pete;\n      case \"Buffalo Bill\":\n        return bill;\n      case \"Billy The Kid\":\n        return billy;\n      case \"Butch Cassidy\":\n        return butch;\n      case \"Quick Draw McGraw\":\n        return quick;\n      case \"Bonnie & Clyde\":\n        return bonnie;\n      case \"Dolores Abernathy\":\n        return delores;\n      case \"Calamity Jane\":\n        return jane;\n      case \"Pony\":\n        return pony;\n      case \"Stallion\":\n        return stallion;\n      case \"Donkey\":\n        return donkey;\n      case \"Bow & Arrow\":\n        return bow;\n      case \"Rifle\":\n        return rifle;\n      case \"Revolver\":\n        return revolver;\n      case \"Dual Revolvers\":\n        return dual;\n      case \"Baba Looey\":\n        return baba;\n      case \"Speedy Gonzales\":\n        return speedy;\n      default:\n        return;\n    }\n  };\n\n  // called when clicked play, sets up game and fetches a new battle\n  const startGame = () => {\n    if (props.inGame) {\n      return;\n    }\n    if (props.deck.length < 10) {\n      return alert(\"Set your deck before you start a game!!\");\n    }\n    getCardsAvailable();\n    getAIDECK();\n    props.setAddCard(true);\n\n    props.startGame();\n    fetch(`https://wild-wild-gwest.herokuapp.com/battle/new/${props.userID}`, {\n      headers: { \"Authorization\": `Bearer ${localStorage.token}` },\n    })\n      .then((res) => res.json())\n      .then((battle) => {\n        props.addBattle(battle);\n      });\n  };\n\n  // function that makes the ai have a turn\n  const aiTurn = () => {\n    checkRoundEnd();\n    if (props.aiPass) {\n      checkRoundEnd();\n      return;\n    }\n    if (props.aiCardsAvailable.length === 0) {\n      props.setAIPass(true);\n      checkRoundEnd();\n      return;\n    }\n    if (props.userPass && props.userPoints < props.aiPoints) {\n      // make ai pass\n      props.setAIPass(true);\n      checkRoundEnd();\n    } else if (props.aiPoints - props.userPoints > 5) {\n      props.setAIPass(true);\n      checkRoundEnd();\n    } else if (\n      props.aiCardsAvailable.length === 1 &&\n      props.round1Win === \"ai\" &&\n      props.round2Win === null\n    ) {\n      props.setAIPass(true);\n      checkRoundEnd();\n    } else {\n      // grab random card and display on board, delete from available\n      let card =\n        props.aiCardsAvailable[\n          Math.floor(Math.random() * props.aiCardsAvailable.length)\n        ];\n      // add card to game board\n      let newBoard = props.aiBoard;\n      let index = card.cardClass;\n      newBoard[index].push(card);\n      props.changeAIBoard(newBoard);\n      // change cards available\n      let newAvailable = props.aiCardsAvailable.filter(\n        (uCard) => uCard.id !== card.id\n      );\n      props.aiAvailable(newAvailable);\n      // set points and change turn to users turn\n      props.setAIPoints(props.aiPoints + card.attack);\n    }\n  };\n\n  // called when ever the user selects a card to play\n  const startTurn = (e, card) => {\n    debugger;\n    if (!props.userTurn) {\n      return;\n    }\n    // add card to game board\n    let newBoard = props.userBoard;\n    let index = card.card.cardClass;\n    newBoard[index].push(card);\n    props.changeUserBoard(newBoard);\n    // remove card from available\n    let newAvailable = props.userCardsAvailable.filter(\n      (uCard) => uCard.id !== card.id\n    );\n    props.cardsAvailable(newAvailable);\n    //set user points\n    props.setUserPoints(props.userPoints + card.card.attack);\n    aiTurn();\n  };\n\n  // checks to see if the round has ended\n  const checkRoundEnd = () => {\n    if (\n      (props.userPass && props.aiPass) ||\n      (props.aiCardsAvailable.length === 0 &&\n        props.userCardsAvailable.length === 0) ||\n      (props.userPass && props.aiCardsAvailable.length === 0) ||\n      (props.aiPass && props.userCardsAvailable.length === 0)\n    ) {\n      setNextRound();\n    }\n  };\n\n  // checks to see if there is a winner in the game\n  const checkWin = () => {\n    // check to see if there is a game winner\n    let win;\n    if (\n      (props.round1Win === props.round2Win ||\n        props.round1Win === props.round3Win) &&\n      props.round1Win !== null &&\n      props.round2Win !== null\n    ) {\n      // alert winner and go to records page post battle\n      props.round1Win === props.username ? (win = true) : (win = false);\n      props.endGame();\n      postBattle(win);\n      if (props.addCard) {\n        addNewCard();\n        props.setAddCard(false);\n      }\n    } else if (\n      props.round2Win === props.round3Win &&\n      props.round2Win !== null\n    ) {\n      // alert winner and go to records page post battle\n      props.round2Win === props.username ? (win = true) : (win = false);\n      postBattle(win);\n      if (props.addCard) {\n        addNewCard();\n        props.setAddCard(false);\n      }\n    }\n  };\n\n  // post fetch to add a new card to the users deck\n  const addNewCard = () => {\n    fetch(`https://wild-wild-gwest.herokuapp.com/card/${props.userID}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.token}`,\n      },\n    });\n  };\n\n  // patch fetch to update the battle with all of the attributes when the game is over\n  const postBattle = (win) => {\n    if (props.round1Score === null) {\n      props.history.push(\"/record\");\n      return;\n    }\n    fetch(`https://wild-wild-gwest.herokuapp.com/battle/${props.battle.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.token}`,\n      },\n      body: JSON.stringify({\n        id: props.battle.id,\n        win: win,\n        round1: props.round1Score,\n        round2: props.round2Score,\n        round3: props.round3Score,\n      }),\n    }).then(() => {\n      resetGame();\n      props.history.push(\"/record\");\n    });\n  };\n\n  // resets all the game states after the game is finished\n  const resetGame = () => {\n    props.setAIPoints(0);\n    props.endGame();\n    props.setUserPoints(0);\n    props.changeAIBoard({ \"melee\": [], \"ranged\": [], \"siege\": [] });\n    props.changeUserBoard({ \"melee\": [], \"ranged\": [], \"siege\": [] });\n    props.setUserPass(false);\n    props.setAIPass(false);\n    props.set1Score(null);\n    props.set2Score(null);\n    props.set3Score(null);\n    props.set1Win(null);\n    props.set2Win(null);\n    props.set3Win(null);\n  };\n\n  // sets the next round when a round is finished\n  const setNextRound = () => {\n    let winner = \"\";\n    if (props.aiPoints >= props.userPoints) {\n      winner = \"ai\";\n    } else if (props.aiPoints < props.userPoints) {\n      winner = props.username;\n    }\n    if (!props.round1Win) {\n      //set round1Win to winner\n      props.set1Win(winner);\n      props.set1Score(`${props.userPoints}-${props.aiPoints}`);\n    } else if (!props.round2Win) {\n      // set round2Win to winner\n      props.set2Win(winner);\n      props.set2Score(`${props.userPoints}-${props.aiPoints}`);\n    } else {\n      // set round3 win to winner\n      props.set3Win(winner);\n      props.set3Score(`${props.userPoints}-${props.aiPoints}`);\n    }\n    props.changeUserBoard({ melee: [], ranged: [], siege: [] });\n    props.changeAIBoard({ melee: [], ranged: [], siege: [] });\n    props.setAIPoints(0);\n    props.setUserPoints(0);\n    props.setUserPass(false);\n    props.setAIPass(false);\n  };\n\n  // gets the cards available for the user\n  const getCardsAvailable = () => {\n    let available = [];\n    while (available.length < 10) {\n      let card = props.deck[Math.floor(Math.random() * props.deck.length)];\n      if (!available.includes(card)) {\n        available.push(card);\n      }\n    }\n    props.cardsAvailable(available);\n  };\n\n  // maps the cards for the user board when it is played\n  const mapUserGame = (area) => {\n    return props.userBoard[area].map((card) => {\n      let photo = getPhoto(card.card.name);\n      return <img className=\"card-images\" src={photo} key={`$card.id`}></img>;\n    });\n  };\n\n  // maps through the ai cards played and displays them on the ai board\n  const mapAIGame = (area) => {\n    return props.aiBoard[area].map((card) => {\n      let photo = getPhoto(card.name);\n      return <img className=\"card-images\" src={photo} key={`$card.id`}></img>;\n    });\n  };\n\n  // maps the cards that are available for the user to play with\n  const mapCardsAvailable = () => {\n    return props.userCardsAvailable.map((card) => {\n      let photo = getPhoto(card.card.name);\n      return (\n        <img\n          className=\"card-images\"\n          onClick={(e) => startTurn(e, card)}\n          src={photo}\n          key={`$card.id`}\n        ></img>\n      );\n    });\n  };\n\n  // gets the ai deck that it can play with\n  const getAIDECK = () => {\n    fetch(\"https://wild-wild-gwest.herokuapp.com/card/ai/deck\", {\n      headers: { \"Authorization\": `Bearer ${localStorage.token}` },\n    })\n      .then((res) => res.json())\n      .then((cards) => {\n        props.aiDeck(cards);\n        getAICARDS(cards);\n      });\n  };\n\n  // sets the ai cards that are available to use\n  const getAICARDS = (cards) => {\n    // random cards array length 10\n    let available = [];\n    while (available.length < 10) {\n      let card = cards[Math.floor(Math.random() * cards.length)];\n      if (!available.includes(card)) {\n        available.push(card);\n      }\n    }\n    props.aiAvailable(available);\n  };\n\n  // when a user clicks the pass button this is called to set the userPass\n  const userPass = () => {\n    props.setUserPass(true);\n    checkWin();\n  };\n  return (\n    <div>\n      {!props.inGame && (\n        <div className=\"game-start\">\n          <h2>Wild Wild Gwest Event</h2>\n          <h5>Make sure you put cards in your deck!!</h5>\n          <button onClick={startGame}>Play</button>\n        </div>\n      )}\n      {props.inGame && (\n        <div className=\"board\">\n          <div className=\"left-board\">\n            <div className=\"ai-stat-board\">\n              <h4>\n                Sherriff: {props.battle.ai_name ? props.battle.ai_name : \"\"}\n              </h4>\n              <p>Points: {props.aiPoints}</p>\n              <p>Cards left: {props.aiCardsAvailable.length}</p>\n              <p>\n                Wins:{\" \"}\n                {props.round1Win === \"ai\" || props.round2Win === \"ai\" ? 1 : 0}\n              </p>\n            </div>\n            {/* <div>\n              <p>weather cards</p>\n            </div> */}\n            <button className=\"pass-button\" onClick={userPass}>\n              Pass\n            </button>\n            <div className=\"user-stat-board\" style={{ display: \"fixed\" }}>\n              <h4>{props.username}</h4>\n              <p>Points: {props.userPoints}</p>\n              <p>Cards left: {props.userCardsAvailable.length}</p>\n              <p>\n                <br />\n                Wins:{\" \"}\n                {props.round1Win === props.username ||\n                props.round2Win === props.username\n                  ? 1\n                  : 0}\n              </p>\n            </div>\n          </div>\n          <div className=\"game-board\">\n            <div>\n              <h3>\n                Sherriff, {props.battle.ai_name ? props.battle.ai_name : \"\"}{\" \"}\n                Game Board : {props.aiPoints}\n              </h3>\n              <div>\n                Melee\n                <div className=\"ai-melee\" star>\n                  {mapAIGame(\"melee\")}\n                </div>\n                Range\n                <div className=\"ai-range\">{mapAIGame(\"ranged\")}</div>\n                Siege\n                <div className=\"ai-siege\">{mapAIGame(\"siege\")}</div>\n              </div>\n            </div>\n            <div>\n              <br></br>\n              <h3>\n                {props.username} Game Board : {props.userPoints}\n              </h3>\n              <div>\n                Melee\n                <div className=\"user-melee\">{mapUserGame(\"melee\")}</div>\n                Range\n                <div className=\"user-range\">{mapUserGame(\"ranged\")}</div>\n                Siege\n                <div className=\"user-siege\">{mapUserGame(\"siege\")}</div>\n                Cards Available\n                <div\n                  style={{\n                    border: \"3px solid rgba(70,42,1,1)\",\n                    display: \"block\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  {mapCardsAvailable()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.username,\n    userID: state.userID,\n    deck: state.deck,\n    userCardsAvailable: state.userCardsAvailable,\n    battle: state.battle,\n    aiDeck: state.aiDeck,\n    aiCardsAvailable: state.aiCardsAvailable,\n    inGame: state.inGame,\n    userTurn: state.userTurn,\n    aiBoard: state.aiBoard,\n    userBoard: state.userBoard,\n    aiPoints: state.aiPoints,\n    userPoints: state.userPoints,\n    aiPass: state.aiPass,\n    userPass: state.userPass,\n    round1Win: state.round1Win,\n    round2Win: state.round2Win,\n    round3Win: state.round3Win,\n    round1Score: state.round1Score,\n    round2Score: state.round2Score,\n    round3Score: state.round3Score,\n    addCard: state.addCard,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addBattles: (battles) => dispatch(addBattles(battles)),\n    aiDeck: (cards) => dispatch(aiDeck(cards)),\n    aiAvailable: (cards) => dispatch(aiAvailable(cards)),\n    startGame: () => dispatch(startGame()),\n    endGame: () => dispatch(endGame()),\n    cardsAvailable: (cards) => dispatch(cardsAvailable(cards)),\n    changeUserTurn: () => dispatch(changeUserTurn()),\n    changeAIBoard: (board) => dispatch(changeAIBoard(board)),\n    changeUserBoard: (board) => dispatch(changeUserBoard(board)),\n    setAIPoints: (points) => dispatch(setAIPoints(points)),\n    setUserPoints: (points) => dispatch(setUserPoints(points)),\n    setUserPass: (pass) => dispatch(setUserPass(pass)),\n    setAIPass: (pass) => dispatch(setAIPass(pass)),\n    set1Win: (winner) => dispatch(set1Win(winner)),\n    set2Win: (winner) => dispatch(set2Win(winner)),\n    set3Win: (winner) => dispatch(set3Win(winner)),\n    set1Score: (score) => dispatch(set1Score(score)),\n    set2Score: (score) => dispatch(set2Score(score)),\n    set3Score: (score) => dispatch(set3Score(score)),\n    addBattle: (battle) => dispatch(addBattle(battle)),\n    setAddCard: (add) => dispatch(setAddCard(add)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Battles);\n","import React, { useEffect } from \"react\";\nimport \"./../index.css\";\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addCards } from \"./../redux/gwestActions.js\";\nimport baba from \"./../assets/cards/Baba_Looey_Card.png\";\nimport gat from \"./../assets/cards/Gattling_Gun_Card.png\";\nimport man from \"./../assets/cards/No_Name_Card.png\";\nimport ringo from \"./../assets/cards/Ringo_Kid_Card.png\";\nimport pete from \"./../assets/cards/Pistol_Pete_Card.png\";\nimport bill from \"./../assets/cards/Bufflo_Bill_Card.png\";\nimport billy from \"./../assets/cards/Billy_The_Kid_Card.png\";\nimport butch from \"./../assets/cards/Butch_Cassidy_Card.png\";\nimport quick from \"./../assets/cards/quick_Draw_McGraw.png\";\nimport bonnie from \"./../assets/cards/Bonnie_Clyde_Card.png\";\nimport delores from \"./../assets/cards/Dolores_Abernathy_Card.png\";\nimport jane from \"./../assets/cards/Calamity_Jane_Card.png\";\nimport pony from \"./../assets/cards/Pony_Card.png\";\nimport stallion from \"./../assets/cards/Stallion_Card.png\";\nimport donkey from \"./../assets/cards/Donkey_Card.png\";\nimport bow from \"./../assets/cards/Bow_Arrow_Card.png\";\nimport rifle from \"./../assets/cards/Rifle_Card.png\";\nimport revolver from \"./../assets/cards/Revolver_Card.png\";\nimport dual from \"./../assets/cards/Dual_Revolvers.png\";\nimport speedy from \"./../assets/cards/Speedy.png\";\n// import {} from \"./../assets/cards\";\n\nconst Cards = ({ username, userID, cards, deck, addCards, battles }) => {\n  useEffect(() => {\n    fetch(`https://wild-wild-gwest.herokuapp.com/card/${userID}`, {\n      headers: { \"Authorization\": `Bearer ${localStorage.token}` },\n    })\n      .then((res) => res.json())\n      .then((cardsResp) => addCards(cardsResp));\n  }, []);\n\n  const getPhoto = (name) => {\n    switch (name) {\n      case \"Gattling Gun\":\n        return gat;\n      case \"Man With No Name\":\n        return man;\n      case \"Ringo Kid\":\n        return ringo;\n      case \"Pistol Pete\":\n        return pete;\n      case \"Buffalo Bill\":\n        return bill;\n      case \"Billy The Kid\":\n        return billy;\n      case \"Butch Cassidy\":\n        return butch;\n      case \"Quick Draw McGraw\":\n        return quick;\n      case \"Bonnie & Clyde\":\n        return bonnie;\n      case \"Dolores Abernathy\":\n        return delores;\n      case \"Calamity Jane\":\n        return jane;\n      case \"Pony\":\n        return pony;\n      case \"Stallion\":\n        return stallion;\n      case \"Donkey\":\n        return donkey;\n      case \"Bow & Arrow\":\n        return bow;\n      case \"Rifle\":\n        return rifle;\n      case \"Revolver\":\n        return revolver;\n      case \"Dual Revolvers\":\n        return dual;\n      case \"Baba Looey\":\n        return baba;\n      case \"Speedy Gonzales\":\n        return speedy;\n      default:\n        return;\n    }\n  };\n\n  const mapCards = () => {\n    if (!cards || cards.status === 404) {\n      return;\n    }\n    return cards.map((uCard) => {\n      let photo = getPhoto(uCard.card.name);\n      return (\n        <img\n          className=\"card-images\"\n          onClick={() => handleClick(uCard.id, false)}\n          src={photo}\n        ></img>\n        // <Card\n        //   className=\"card-card\"\n        //   key={`${uCard.id}`}\n        //   onClick={() => handleClick(uCard.id, false)}\n        // >\n        //   <Card.Body>\n        //     <Card.Title>{uCard.card.name}</Card.Title>\n        //     <Card.Subtitle>Class: {uCard.card.cardClass}</Card.Subtitle>\n        //     <Card.Text>Attack: {uCard.card.attack}</Card.Text>\n        //   </Card.Body>\n        // </Card>\n      );\n    });\n  };\n\n  const mapDeck = () => {\n    if (!deck || deck.status === 404) {\n      return;\n    }\n    return deck.map((uCard) => {\n      let photo = getPhoto(uCard.card.name);\n      return (\n        <img\n          className=\"card-images\"\n          onClick={() => handleClick(uCard.id, true)}\n          src={photo}\n        ></img>\n        // <Card\n        //   className=\"card-card\"\n        //   key={`${uCard.id}`}\n        //   onClick={() => handleClick(uCard.id, true)}\n        // >\n        //   <Card.Body>\n        //     <Card.Title>{uCard.card.name}</Card.Title>\n        //     <Card.Subtitle>Class: {uCard.card.cardClass}</Card.Subtitle>\n        //     <Card.Text>Attack: {uCard.card.attack}</Card.Text>\n        //   </Card.Body>\n        // </Card>\n      );\n    });\n  };\n\n  const handleClick = (id, deckCard) => {\n    debugger;\n    if (deckCard && deck.length <= 12) {\n      return alert(\"You need atleast 12 cards in your deck at all times.\");\n    }\n    fetch(`https://wild-wild-gwest.herokuapp.com/card/${userID}/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((cards) => {\n        debugger;\n        addCards(cards);\n      });\n  };\n\n  const getLevel = () => {\n    let wins = battles.filter((battle) => battle.win);\n    return parseInt(wins.length / 3);\n  };\n\n  const getRank = () => {\n    let rank = \"\";\n    if (getLevel() <= 2) {\n      rank = \"Pea Shooter\";\n    } else if (getLevel() <= 4) {\n      rank = \"Outlaw\";\n    } else if (getLevel() <= 6) {\n      rank = \"Bank Robber\";\n    } else if (getLevel() <= 8) {\n      rank = \"Sherriff Terrorizer\";\n    } else {\n      rank = \"Gwest's Most Wanted\";\n    }\n    return rank;\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div className=\"your-cards\">\n        <div className=\"your-card-header\">\n          <h2>All Cards ({cards.length})</h2>\n        </div>\n        {mapCards()}\n      </div>\n      <div className=\"card-profile\">\n        <div className=\"card-profile-header\">\n          <h4>Username: {username}</h4>\n          <h5>Level: {getLevel()}</h5>\n          <h5>Rank: {getRank()}</h5>\n        </div>\n      </div>\n      <div className=\"your-deck\">\n        <div className=\"your-deck-header\">\n          <h2>Cards in Deck ({deck.length})</h2>\n        </div>\n        {mapDeck()}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.username,\n    userID: state.userID,\n    cards: state.cards,\n    deck: state.deck,\n    battles: state.battles,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addCards: (cards) => dispatch(addCards(cards)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cards);\n","import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./../index.css\";\nimport { addBattles } from \"./../redux/gwestActions.js\";\nimport { Card } from \"react-bootstrap\";\n\nconst Record = (props) => {\n  useEffect(() => {\n    fetch(`https://wild-wild-gwest.herokuapp.com/battle/${props.userID}`, {\n      headers: { \"Authorization\": `Bearer ${localStorage.token}` },\n    })\n      .then((res) => res.json())\n      .then((battles) => {\n        if (battles !== 0) {\n          props.addBattles(battles.reverse());\n        }\n      });\n  }, []);\n\n  const mapBattlesToCards = () => {\n    let battles = props.battles;\n    if (battles.length == 0) {\n      return;\n    }\n    battles = props.battles;\n    return battles.map((battle) => {\n      return (\n        // <div className=\"cardDiv\">\n        <Card className=\"recordCard\" key={`${battle.id}`}>\n          <Card.Body className=\"recordCard2\">\n            <Card.Title>Sheriff: {battle.ai_name}</Card.Title>\n            <Card.Subtitle>\n              Outcome: {battle.win ? \"YOU WON!!\" : \"YOU LOST...\"}\n            </Card.Subtitle>\n            <Card.Text>\n              Round 1 Score: {battle.round1} | Round 2 Score: {battle.round2}\n              {\" | \"}\n              {battle.round3 && `Round 3 Score: ${battle.round3}`}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n        // </div>\n      );\n    });\n  };\n\n  const getWins = () => {\n    if (!props.battles) {\n      return 0;\n    }\n    let wins = props.battles.filter((battle) => battle.win);\n    return wins.length;\n  };\n\n  const getLosses = () => {\n    if (!props.battles) {\n      return 0;\n    }\n    let losses = props.battles.filter((battle) => !battle.win);\n    return losses.length;\n  };\n\n  const getLevel = () => {\n    let wins = props.battles.filter((battle) => battle.win);\n    return parseInt(wins.length / 3);\n  };\n\n  const getRank = () => {\n    let rank = \"\";\n    if (getLevel() <= 2) {\n      rank = \"Pea Shooter\";\n    } else if (getLevel() <= 4) {\n      rank = \"Outlaw\";\n    } else if (getLevel() <= 6) {\n      rank = \"Bank Robber\";\n    } else if (getLevel() <= 8) {\n      rank = \"Sherriff Terrorizer\";\n    } else {\n      rank = \"Gwest's Most Wanted\";\n    }\n    return rank;\n  };\n\n  return (\n    <Fragment>\n      <div className=\"record-label\">\n        <h2 className=\"recordH2\">{props.username}</h2>\n        <h5>\n          Level: {getLevel()} <br />\n          Rank: {getRank()}\n        </h5>\n        <h5>\n          Wins: {getWins()} <br />\n          Losses: {getLosses()}\n        </h5>\n        {props.battles.length == 0 && (\n          <h5>You do not have a record yet! Set your deck and go play!</h5>\n        )}\n      </div>\n      <br></br>\n      {props.battles.length != 0 && (\n        <div className=\"recordDiv\">{mapBattlesToCards()}</div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.username,\n    userID: state.userID,\n    battles: state.battles,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addBattles: (battles) => dispatch(addBattles(battles)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Record);\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Home from \"./components/Home.js\";\nimport NavBar from \"./components/NavBar.js\";\nimport Login from \"./components/Login.js\";\nimport Signup from \"./components/Signup.js\";\nimport Battles from \"./components/Battles.js\";\nimport Cards from \"./components/Cards.js\";\nimport Record from \"./components/Record.js\";\nimport { withRouter } from \"react-router-dom\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login, logout } from \"./redux/gwestActions.js\";\n\nconst App = (props) => {\n  return (\n    <Router>\n      <NavBar></NavBar>\n      <Switch>\n        <Route exact path=\"/\" component={Home}></Route>\n        <Route\n          path=\"/login\"\n          component={(props) => <Login {...props} />}\n        ></Route>\n        <Route\n          path=\"/signup\"\n          component={(props) => <Signup {...props} />}\n        ></Route>\n        <Route path=\"/battles\" component={Battles}></Route>\n        <Route path=\"/cards\" component={Cards}></Route>\n        <Route path=\"/record\" component={Record}></Route>\n      </Switch>\n    </Router>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    username: state.username,\n    userID: state.id,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (username, id) => dispatch(login(username, id)),\n    logout: (username) => dispatch(logout(username)),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\n  username: null,\n  userID: null,\n  battles: [],\n  battle: { ai_name: null },\n  cards: [],\n  deck: [],\n  userCardsAvailable: [],\n  aiDeck: [],\n  aiCardsAvailable: [],\n  inGame: false,\n  roundCount: 0,\n  round1Win: null,\n  round2Win: null,\n  round3Win: null,\n  round1Score: null,\n  round2Score: null,\n  round3Score: null,\n  userTurn: true,\n  aiBoard: {\n    melee: [],\n    ranged: [],\n    siege: [],\n  },\n  userBoard: {\n    melee: [],\n    ranged: [],\n    siege: [],\n  },\n  aiPass: false,\n  userPass: false,\n  aiPoints: 0,\n  userPoints: 0,\n  addCard: true,\n};\n\nexport const gwestReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        username: action.payload.username,\n        userID: action.payload.id,\n      };\n    case \"LOGOUT\":\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        username: null,\n        userID: null,\n      };\n    case \"ALLBATTLES\":\n      return {\n        ...state,\n        battles: action.payload,\n      };\n    case \"ADDBATTLE\":\n      return {\n        ...state,\n        battle: action.payload,\n      };\n    case \"ADDCARDS\":\n      let deckCards = action.payload.filter((uCard) => uCard.indeck);\n      let cards = action.payload.filter((uCard) => !uCard.indeck);\n      return {\n        ...state,\n        cards: cards,\n        deck: deckCards,\n      };\n    case \"STARTGAME\":\n      return {\n        ...state,\n        inGame: true,\n      };\n    case \"ENDGAME\":\n      return {\n        ...state,\n        inGame: false,\n      };\n    case \"NEXTROUND\":\n      return {\n        ...state,\n        roundCount: action.payload,\n      };\n    case \"ROUND1WINNER\":\n      return {\n        ...state,\n        round1Win: action.payload,\n      };\n    case \"ROUND2WINNER\":\n      return {\n        ...state,\n        round2Win: action.payload,\n      };\n    case \"ROUND3WINNER\":\n      return {\n        ...state,\n        round3Win: action.payload,\n      };\n    case \"ROUND1SCORE\":\n      return {\n        ...state,\n        round1Score: action.payload,\n      };\n    case \"ROUND2SCORE\":\n      return {\n        ...state,\n        round2Score: action.payload,\n      };\n    case \"ROUND3SCORE\":\n      return {\n        ...state,\n        round3Score: action.payload,\n      };\n    case \"USERTURN\":\n      return {\n        ...state,\n        userTurn: !state.userTurn,\n      };\n    case \"AIBOARDMOVE\":\n      return {\n        ...state,\n        aiBoard: {\n          [action.payload.class]: [\n            ...state.aiBoard[action.payload.class],\n            action.payload.card,\n          ],\n        },\n      };\n    case \"AIDECK\":\n      return {\n        ...state,\n        aiDeck: action.payload,\n      };\n    case \"AIAVAILABLE\":\n      return {\n        ...state,\n        aiCardsAvailable: action.payload,\n      };\n    case \"CARDSAVAILABLE\":\n      return {\n        ...state,\n        userCardsAvailable: action.payload,\n      };\n    case \"CHANGEAIBOARD\":\n      return {\n        ...state,\n        aiBoard: action.payload,\n      };\n    case \"CHANGEUSERBOARD\":\n      return {\n        ...state,\n        userBoard: action.payload,\n      };\n    case \"USERPOINTS\":\n      return {\n        ...state,\n        userPoints: action.payload,\n      };\n    case \"AIPOINTS\":\n      return {\n        ...state,\n        aiPoints: action.payload,\n      };\n    case \"USERPASS\":\n      return {\n        ...state,\n        userPass: action.payload,\n      };\n    case \"AIPASS\":\n      return {\n        ...state,\n        aiPass: action.payload,\n      };\n    case \"SETADDCARD\":\n      return {\n        ...state,\n        addCard: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport { gwestReducer } from \"./redux/gwestReducer.js\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  gwestReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App\n        style={{\n          backgroundImage:\n            \"url(\" +\n            \"https://www.fodors.com/wp-content/uploads/2020/01/11_WildWestTowns__HERO_shutterstock_267103796.jpg\" +\n            \")\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n        }}\n      />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}